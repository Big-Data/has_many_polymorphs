
Has_many_polymorphs

An ActiveRecord plugin for defining self-referential polymorphic associations.

== License

Copyright 2007 Cloudburst, LLC. Licensed under the AFL 3. See the included LICENSE file. 

== Description

This plugin gives you the ability to define easy-to-use self-referential polymorphic associations with full array-like behavior in your models. It is an extension of <tt>has_many :through</tt>.

“Polymorphic” means an association can freely point to any of several unrelated model classes, instead of being tied to one particular class.

== Features

* self-references
* double-sided polymorphism
* efficient, merged association SELECT
* STI support
* namespace support
* automatic individual and reverse associations

And a generator for a tagging system, a common use case.

== Requirements

* Rails 1.2.3 or greater

= Usage

== Installation

To install the Rails plugin, run:
  script/plugin install svn://rubyforge.org/var/svn/fauna/has_many_polymorphs/trunk

There's also a gem version. To install it instead, run: 
  sudo gem install has_many_polymorphs
  
If you are using the gem, make sure to add <tt>require 'has_many_polymorphs'</tt> to <tt>environment.rb</tt>, before Rails::Initializer block.

== Configuration

Setup the parent model as so:

  class Petfood < ActiveRecord::Base
    has_many_polymorphs :eaters, :from => [:dogs, :cats, :birds]
  end

The join model:

  class EatersPetfood < ActiveRecord::Base
    belongs_to :petfood
    belongs_to :eater, :polymorphic => true
  end

One of the child models:

  class Dog < ActiveRecord::Base
    # nothing
  end

See ActiveRecord::Associations::PolymorphicClassMethods for more configuration options.

== Helper methods example

  petfood = Petfood.find(1)
  petfood.eaters.map(&:class) # => [Dog, Cat, Cat, Bird]
  
  petfood.eaters.push(Cat.create)
  petfood.eaters << Cat.create
  petfood.cats.size # => 4
  petfood.eaters.size # => 6
  
  petfood.eaters.delete(petfood.dogs[0])
  petfood.dogs.size # => 0
  petfood.eaters.size # => 5

  # works both ways
  petfood.eaters[0].petfoods.include?(petfood) # => true

See ActiveRecord::Associations::PolymorphicAssociation for more helper method details.

= Extras

== Double-sided polymorphism

Double-sided relationships are defined on the join model:

  class Devouring < ActiveRecord::Base
    belongs_to :eater, :polymorphic => true
    belongs_to :eaten, :polymorphic => true
  
    acts_as_double_polymorphic_join(
      :eaters =>[:dogs, :cats], 
      :eatens => [:cats, :birds]
    )       
  end
  
Now, dogs and cats can eat birds and cats. Birds can't eat anything (they aren't <tt>eaters</tt>) and dogs can't be eaten by anything (since they aren't <tt>eatens</tt>). The keys stand for what the models are, not what they do. 

In this case, each eater/eaten relationship is called a Devouring.

See ActiveRecord::Associations::PolymorphicClassMethods for more.

== Tagging generator

Has_many_polymorphs includes a tagging system generator.

  ./script/generate tagging TaggableModel1 TaggableModel2 [..]

You can use the flag <tt>--skip-migration</tt> (to avoid generating a migration, for example, if you are converting from <tt>acts_as_taggable)</tt>, as well as the flag <tt>--self-referential</tt> (if you want tags to be able to tag tags).

Tests will be generated, but will not work unless you have at least 2 fixture entries for the first two taggable models. Their ids must be 1 and 2.

== Troubleshooting

Some debugging tools are available in <tt>lib/has_many_polymorphs/debugging_tools.rb</tt>.

If you are having trouble, think very carefully about how your model classes, key columns, and table names relate. You may have to explicitly specify options on your join model such as <tt>:class_name</tt>, <tt>:foreign_key</tt>, or <tt>:as</tt>. The included tests are a good place to look for examples.

Note that because of the way Rails reloads model classes, the plugin can sometimes bog down your development server. Set <tt>config.cache_classes = true</tt> in <tt>config/environments/development.rb</tt> to avoid this. 

== Further resources

* http://blog.evanweaver.com/pages/code#polymorphs
* http://rubyforge.org/forum/forum.php?forum_id=8117
